version: "3.8"
# https://github.com/inventree/InvenTree


# Docker compose recipe for InvenTree production server
# - PostgreSQL as the database backend
# - gunicorn as the InvenTree web server
# - django-q as the InvenTree background worker process
# - nginx as a reverse proxy

# ---------------------
# READ BEFORE STARTING!
# ---------------------

# -----------------------------
# Setting environment variables
# -----------------------------
# Shared environment variables should be stored in the .env file
# Changes made to this file are reflected across all containers!
#
# IMPORTANT NOTE:
# You should not have to change *anything* within the docker-compose.yml file!
# Instead, make any changes in the .env file!
# The only *mandatory* change is to set the INVENTREE_EXT_VOLUME variable,
# which defines the directory (on your local machine) where persistent data are stored.

# ------------------------
# InvenTree Image Versions
# ------------------------
# By default, this docker-compose script targets the STABLE version of InvenTree,
# image: inventree/inventree:stable
#
# To run the LATEST (development) version of InvenTree, change the target image to:
# image: inventree/inventree:latest
#
# Alternatively, you could target a specific tagged release version with (for example):
# image: inventree/inventree:0.5.3
#
# NOTE: If you change the target image, ensure it is the same for the following containers:
# - inventree-server
# - inventree-worker

services:
  # Database service
  # Use PostgreSQL as the database backend
  inventree-db:
    container_name: inventree-db
    image: postgres:13
    ports:
      - ${INVENTREE_DB_PORT:-5432}/tcp
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdb
      - POSTGRES_USER=${INVENTREE_DB_USER:?You must provide the 'INVENTREE_DB_USER' variable in the .env file}
      - POSTGRES_PASSWORD=${INVENTREE_DB_PASSWORD:?You must provide the 'INVENTREE_DB_PASSWORD' variable in the .env file}
      - POSTGRES_DB=${INVENTREE_DB_NAME:?You must provide the 'INVENTREE_DB_NAME' variable in the .env file}
    volumes:
      # Map 'data' volume such that postgres database is stored externally
      - inventree_data:/var/lib/postgresql/data/
    restart: unless-stopped

  # InvenTree web server services
  # Uses gunicorn as the web server
  inventree-server:
    container_name: inventree-server
    # If you wish to specify a particular InvenTree version, do so here
    image: inventree/inventree:stable
    expose:
      - 8000
    depends_on:
      - inventree-db
    env_file:
      - .env
    volumes:
      # Data volume must map to /home/inventree/data
      - inventree_data:/home/inventree/data
    restart: unless-stopped

  # Background worker process handles long-running or periodic tasks
  inventree-worker:
    container_name: inventree-worker
    # If you wish to specify a particular InvenTree version, do so here
    image: inventree/inventree:stable
    command: invoke worker
    depends_on:
      - inventree-db
      - inventree-server
    env_file:
      - .env
    volumes:
      # Data volume must map to /home/inventree/data
      - inventree_data:/home/inventree/data
    restart: unless-stopped

  # nginx acts as a reverse proxy
  # static files are served directly by nginx
  # media files are served by nginx, although authentication is redirected to inventree-server
  # web requests are redirected to gunicorn
  # NOTE: You will need to provide a working nginx.conf file!
  inventree-proxy:
    container_name: inventree-proxy
    image: nginx:stable
    depends_on:
      - inventree-server
    env_file:
      - .env
    ports:
      # Default web port is 1337 (can be changed in the .env file)
      - ${INVENTREE_WEB_PORT:-1337}:80
    volumes:
      # Provide nginx configuration file to the container
      # Refer to the provided example file as a starting point
      - ./nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      # nginx proxy needs access to static and media files
      - inventree_data:/var/www
    restart: unless-stopped

volumes:
  # NOTE: Change /path/to/data to a directory on your local machine
  # Persistent data, stored external to the container(s)
  inventree_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      # This directory specified where InvenTree data are stored "outside" the docker containers
      device: ${INVENTREE_EXT_VOLUME:?You must specify the 'INVENTREE_EXT_VOLUME' variable in the .env file!}

  sheetable:
    container_name: sheetable
    restart: unless-stopped
    image: vallezw/sheetable
    ports:
      - 80:8080
    environment:
      - CONFIG_PATH=/app/config/
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /local/path/config/dir:/app/config

  # https://docs.linuxserver.io/images/docker-duplicati

  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - CLI_ARGS= #optional
    volumes:
      - </path/to/appdata/config>:/config
      - </path/to/backups>:/backups
      - </path/to/source>:/source
    ports:
      - 8200:8200
    restart: unless-stopped

# https://github.com/monicahq/docker
  app:
    image: monica
    env_file: .env
    depends_on:
      - db
    ports:
      - 8080:80
    volumes:
      - data:/var/www/html/storage
    restart: always

  cron:
    image: monica
    env_file: .env
    restart: always
    volumes:
      - data:/var/www/html/storage
    command: cron.sh
    depends_on:
      - db

  db:
    image: jsurf/rpi-mariadb:latest
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: monica
      MYSQL_USER: homestead
      MYSQL_PASSWORD: secret
    volumes:
      - mysql:/var/lib/mysql
    restart: always

volumes:
  data:
    name: data
  mysql:
    name: mysql


# https://github.com/Yooooomi/your_spotify#readme
  server:
    image: yooooomi/your_spotify_server
    restart: always
    ports:
      - "8080:8080"
    links:
      - mongo
    depends_on:
      - mongo
    environment:
      - API_ENDPOINT=http://localhost:8080 # This MUST be included as a valid URL in the spotify dashboard (see below)
      - CLIENT_ENDPOINT=http://localhost:3000
      - SPOTIFY_PUBLIC=__your_spotify_client_id__
      - SPOTIFY_SECRET=__your_spotify_secret__
      - CORS=http://localhost:3000,http://localhost:3001 # all if you want to allow every origin
  mongo:
    container_name: mongo
    image: mongo:4.4.8
    volumes:
      - ./your_spotify_db:/data/db

  web:
    image: yooooomi/your_spotify_client
    restart: always
    ports:
      - "3000:3000"
    environment:
      - API_ENDPOINT=http://localhost:8080

# https://github.com/AlexSciFier/neonlink
  neonlink:
    image: alexscifier/neonlink
    container_name: neonlink
    volumes:
      - ./bookmarks.sqlite:/app/db/bookmarks.sqlite
      - ./background:/app/public/static/media/background
    restart: unless-stopped
    ports:
      - "80:3333"
# https://github.com/partkeepr/PartKeepr
volumes:
    db:

    app:
        image: partkeepr/development:latest

        # Use this instead if you want to develop the docker infrastructure
        #build:
            #context: ./app
            #args:
                #SRC_IMAGE: partkeepr/base-dev:latest

        ports:
            - 8082:80
        volumes:
            - "../..:/var/www/pk"
        env_file:
            - ./github.env
        environment:
            GITHUB_DEBUG_UID: 1000
            #ADD_PHPINFO_FILE: 1
            #PARTKEEPR_FORCE_UPDATE: "yes"

    db:
        image: mariadb:10.1
        volumes:
            - db:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_USER: partkeepr
            MYSQL_PASSWORD: partkeepr
            MYSQL_DATABASE: partkeepr

    initdb:
        build: initdb
        depends_on:
            - db
        environment:
            MYSQL_USER: partkeepr
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: partkeepr
            # Setting this to yes will enable reset upon running
            #RESET_DATABASE: 'yes'
            GITHUB_DEBUG_UID: 1000
        volumes:
            - "../../data:/data"



